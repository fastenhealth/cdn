{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.module.ts","./src/app/components/brand-search/brand-search.component.ts","./src/app/components/brand-search/brand-search.component.html","./src/app/components/portal-connect/portal-connect.component.ts","./src/app/components/portal-connect/portal-connect.component.html","./src/app/constants.ts","./src/app/directives/image-fallback.directive.ts","./src/app/fasten-stitch/fasten-stitch.component.ts","./src/app/fasten-stitch/fasten-stitch.component.html","./src/app/models/lighthouse/source-state.ts","./src/app/models/search-filter.ts","./src/app/services/connect.service.ts","./src/app/services/lighthouse.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule, Injector } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule} from '@angular/forms';\nimport { createCustomElement } from '@angular/elements';\n\nimport { FastenStitchComponent } from './fasten-stitch/fasten-stitch.component';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport { BrandSearchComponent } from './components/brand-search/brand-search.component';\nimport { PortalConnectComponent } from './components/portal-connect/portal-connect.component';\nimport { ImageFallbackDirective } from './directives/image-fallback.directive';\n\n@NgModule({\n  declarations: [\n    FastenStitchComponent,\n    BrandSearchComponent,\n    PortalConnectComponent,\n    ImageFallbackDirective,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    CommonModule,\n  ],\n  providers: [],\n  entryComponents: [FastenStitchComponent]\n})\nexport class AppModule {\n  constructor(injector: Injector) {\n    const el = createCustomElement(FastenStitchComponent, { injector });\n    customElements.define('fasten-stitch', el);\n  }\n\n  ngDoBootstrap() {}\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SearchFilter} from '../../models/search-filter';\nimport {\n  LighthouseBrandListDisplayItem,\n  LighthouseSourceSearch,\n  LighthouseSourceSearchAggregation\n} from '../../models/lighthouse/lighthouse-source-search';\nimport {SourceListItem} from '../../fasten-stitch/fasten-stitch.component';\nimport {Observable, of} from 'rxjs';\nimport {LighthouseService} from '../../services/lighthouse.service';\nimport {PatientAccessBrand} from '../../models/patient-access-brands';\nimport {ApiMode} from '../../constants';\n\n@Component({\n  selector: 'app-brand-search',\n  templateUrl: './brand-search.component.html',\n  styleUrls: ['./brand-search.component.css']\n})\nexport class BrandSearchComponent implements OnInit {\n\n  @Input() brand!: LighthouseBrandListDisplayItem;\n  @Input() apiMode: ApiMode = ApiMode.Test;\n  @Output() brandChange = new EventEmitter<LighthouseBrandListDisplayItem>();\n\n\n  loading = false;\n\n  lighthouseBrandList: SourceListItem[] = []\n\n  filter: SearchFilter = new SearchFilter()\n\n  //limits that are tied to the current result set.\n  resultLimits: {\n    totalItems: number,\n    scrollComplete: boolean,\n    platformTypesBuckets: LighthouseSourceSearchAggregation | undefined,\n    categoryBuckets: LighthouseSourceSearchAggregation | undefined,\n  } = {\n    totalItems: 0,\n    scrollComplete: false,\n    platformTypesBuckets: undefined,\n    categoryBuckets: undefined\n  }\n\n  constructor(public lighthouseApi: LighthouseService) { }\n\n  ngOnInit(): void {\n    this.querySources(true)\n  }\n\n\n  public querySources(reset: boolean): Observable<LighthouseSourceSearch|null> {\n    if(reset){\n      this.resetSearch()\n    }\n\n    console.log(\"querySources()\", this.filter)\n    if(this.loading){\n      console.log(\"already loading, ignoring querySources()\")\n      return of(null)\n    }\n    //TODO: pass filter to function.\n    // this.location.replaceState('/dashboard','', this.filter)\n\n    if(!this.filter){\n      this.filter = new SearchFilter()\n      console.log(\"querySources() - no filter provided, using current form value\", this.filter)\n    }\n\n\n    this.filter.fields = [\"*\"];\n    this.loading = true\n    var searchObservable = this.lighthouseApi.searchLighthouseSources(this.apiMode, this.filter);\n    searchObservable.subscribe(wrapper => {\n        console.log(\"search sources\", wrapper);\n        // this.searchResults = wrapper.hits.hits;\n        this.resultLimits.totalItems = wrapper.hits.total.value;\n\n        this.lighthouseBrandList = this.lighthouseBrandList.concat(wrapper.hits.hits.map((result) => {\n          return {\n            brand: result._source,\n            searchHighlights: result?.highlight?.aliases || []\n          }\n        }))\n\n        //check if scroll is complete.\n        if(!wrapper?.hits || !wrapper?.hits?.hits || wrapper?.hits?.hits?.length == 0 || wrapper?.hits?.total?.value == wrapper?.hits?.hits?.length){\n          console.log(\"SCROLL_COMPLETE!@@@@@@@@\")\n          this.resultLimits.scrollComplete = true;\n        } else {\n          //change the current Page (but don't cause a new query)\n          console.log(\"SETTING NEXT SORT KEY:\", wrapper.hits.hits[wrapper.hits.hits.length - 1].sort.join(','))\n          this.filter.searchAfter = wrapper.hits.hits[wrapper.hits.hits.length - 1].sort.join(\",\")\n        }\n        this.loading = false\n      },\n      error => {\n        this.loading = false\n        console.error(\"sources FAILED\", error)\n      },\n      () => {\n        this.loading = false\n        console.log(\"sources finished\")\n      }\n    );\n    return searchObservable;\n  }\n\n  public selectBrand(brandItem: LighthouseBrandListDisplayItem){\n    this.brandChange.emit(brandItem)\n  }\n\n  private resetSearch(){\n    console.log(\"reset search...\")\n    this.lighthouseBrandList = []\n    this.filter.searchAfter = []\n    this.resultLimits = {\n      totalItems: 0,\n      scrollComplete: false,\n      platformTypesBuckets: undefined,\n      categoryBuckets: undefined\n    }\n  }\n\n\n\n}\n","<form action=\"#\">\n  <div class=\"grid gap-4 mb-4 sm:grid-cols-2\">\n    <div class=\"sm:col-span-2\">\n      <input type=\"text\"\n             name=\"name\"\n             id=\"name\"\n             [(ngModel)]=\"filter.query\"\n             class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\n             placeholder=\"Ex. HCA Healthcare, Ascension, Common Spirit, Trinity, LifePoint Health\"\n             (keyup)=\"querySources(true)\"\n      >\n    </div>\n\n    <div class=\"sm:col-span-2\">\n\n      <div class=\"hidden flex items-center justify-between mb-4\">\n        <h5 class=\"leading-none text-gray-900 dark:text-white\">Popular</h5>\n        <a href=\"#\" class=\"text-sm font-medium text-blue-600 hover:underline dark:text-blue-500\">\n          View all\n        </a>\n      </div>\n      <div class=\"flow-root\">\n        <ul role=\"list\" class=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-80 max-h-80 overflow-auto\">\n          <li *ngFor=\"let brand of lighthouseBrandList\" class=\"py-3 sm:py-4\">\n            <div (click)=\"selectBrand(brand.brand)\" class=\"flex items-center\">\n              <div class=\"flex-shrink-0\">\n                <img class=\"w-10 max-h-8\" imageFallback src=\"https://cdn.fastenhealth.com/logos/sources/{{brand.brand.id}}.png\">\n              </div>\n              <div class=\"flex-1 min-w-0 ms-4\">\n                <p class=\"text-sm font-medium text-gray-900 truncate dark:text-white\">\n                  {{brand.brand.name}}\n                </p>\n                <p class=\"text-sm text-gray-500 truncate dark:text-gray-400\">\n                  {{brand.brand.brand_website}}\n                </p>\n              </div>\n              <span class=\"bg-blue-100 text-blue-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300\">\n                {{brand.brand?.portals?.length}} {{brand.brand?.portals?.length == 1 ? 'portal' : 'portals'}}\n              </span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <div class=\"flex justify-end space-x-4\">\n    <p class=\"font-light text-xs\">Powered by <a class=\"underline\" target=\"_blank\" href=\"https://www.fastenhealth.com\">Fasten Connect</a></p>\n  </div>\n</form>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {LighthouseBrandListDisplayItem} from '../../models/lighthouse/lighthouse-source-search';\nimport {LighthouseService} from '../../services/lighthouse.service';\nimport {ApiMode, ConnectMode} from '../../constants';\nimport {LighthouseSourceMetadata} from '../../models/lighthouse/lighthouse-source-metadata';\nimport {Organization} from '../../models/organization';\nimport {ConnectService} from '../../services/connect.service';\n\n@Component({\n  selector: 'app-portal-connect',\n  templateUrl: './portal-connect.component.html',\n  styleUrls: ['./portal-connect.component.css']\n})\nexport class PortalConnectComponent implements OnInit {\n\n  @Input() brand!: LighthouseBrandListDisplayItem;\n  @Input() apiMode: ApiMode = ApiMode.Test;\n  @Input() org!: Organization\n  @Input() publicId!: string\n\n  @Input() connectMode: ConnectMode = ConnectMode.Redirect;\n  @Input() reconnectOrgConnectionId: string | null = null;\n\n  constructor(\n    public lighthouseApi: LighthouseService,\n    public connectApi: ConnectService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  public connectHandler($event, brandId: string, portalId: string, endpointId: string): void {\n\n    ($event.currentTarget as HTMLButtonElement).disabled = true;\n\n    this.connectApi.connectWithRedirect(this.publicId, brandId, portalId, endpointId, this.reconnectOrgConnectionId, this.connectMode).subscribe((orgConnectionCallbackData) => {\n      console.log(orgConnectionCallbackData)\n\n      if(!orgConnectionCallbackData){\n        return //wait for redirect\n      }\n\n      //Note: this code will only run when this.connectMode == popup\n      //when connectMode == 'redirect', the user is redirected in the same window, and this code is never executed.\n\n\n      // close the modal after sending an event to the parent with this payload\n      // this.modalService.dismissAll()\n      //\n      // //redirect the browser back to this page with the code in the query string parameters\n      // this.lighthouseApi.redirectWithDesktopCode(desktopRedirectData.state, desktopRedirectData.codeData)\n    })\n\n    // this.lighthouseApi.getLighthouseSource(this.apiMode, endpointId)\n    //   .then(async (sourceMetadata: LighthouseSourceMetadata) => {\n    //     sourceMetadata.brand_id = brandId\n    //     sourceMetadata.portal_id = portalId\n    //\n    //     console.log(sourceMetadata);\n    //     let authorizationUrl = await this.lighthouseApi.generateSourceAuthorizeUrl(sourceMetadata)\n    //\n    //     console.log('authorize url:', authorizationUrl.toString());\n    //     // redirect to lighthouse with uri's (or open a new window in desktop mode)\n    //     this.lighthouseApi.redirectWithOriginAndDestination(this.apiMode, authorizationUrl.toString(), sourceMetadata).subscribe((desktopRedirectData) => {\n    //       if(!desktopRedirectData){\n    //         return //wait for redirect\n    //       }\n    //     })\n    //   });\n  }\n\n\n}\n","\n<form action=\"#\">\n  <div class=\"grid gap-4 mb-4 sm:grid-cols-8\">\n\n    <div class=\"flex justify-between sm:col-span-6 sm:col-start-2\">\n      <div class=\"relative w-20 h-20 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600\">\n        <img class=\"w-20 max-h-20 inline-block align-middle\" imageFallback src=\"{{org?.logo_uri}}\">\n      </div>\n\n      <div class=\"flex items-center overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600\">\n        <img class=\"w-20 h-20 p-1 rounded-full ring-2 ring-gray-300 dark:ring-gray-500\" src=\"https://cdn.fastenhealth.com/logos/sources/fasten.png\">\n      </div>\n\n\n      <div class=\"flex items-center overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600\">\n        <img class=\"w-20 max-h-20 inline-block align-middle\" imageFallback src=\"https://cdn.fastenhealth.com/logos/sources/{{brand.id}}.png\">\n      </div>\n    </div>\n\n\n    <div class=\"sm:col-span-6 sm:col-start-2\">\n      <h3 class=\"text-lg font-light text-center text-gray-900 dark:text-white\">\n        {{org?.name}} uses <strong>Fasten Connect</strong> to link your medical records\n      </h3>\n\n      <ul class=\"text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\n        <li class=\"w-full px-4 py-2 border-b border-gray-200 rounded-t-lg dark:border-gray-600\">\n          <div class=\"flex items-center space-x-4 rtl:space-x-reverse\">\n            <div class=\"flex-shrink-0\">\n              <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.5 11.5 11 13l4-3.5M12 20A16.4 16.4 0 0 1 5 6.7L12 4l7 2.7A16.7 16.7 0 0 1 12 20Z\"/>\n              </svg>\n            </div>\n            <div class=\"flex-1 min-w-0\">\n              <p class=\"text-sm font-light text-gray-900 dark:text-white\">\n                Fasten lets you securely connect your medical records in seconds\n              </p>\n\n            </div>\n          </div>\n        </li>\n        <li class=\"w-full px-4 py-2 border-b border-gray-200 dark:border-gray-600\">\n          <div class=\"flex items-center space-x-4 rtl:space-x-reverse\">\n            <div class=\"flex-shrink-0\">\n              <svg class=\"w-6 h-6 text-gray-800 dark:text-white\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 14v3m-3-6V7a3 3 0 1 1 6 0v4m-8 0h10c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1H7a1 1 0 0 1-1-1v-7c0-.6.4-1 1-1Z\"/>\n              </svg>\n            </div>\n            <div class=\"flex-1 min-w-0\">\n              <p class=\"text-sm font-light text-gray-900 dark:text-white\">\n                Fasten doesn't sell your personal info, and will only use it with your permission.\n              </p>\n            </div>\n          </div>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"sm:col-span-8\">\n      <ul class=\"my-4 space-y-3\">\n        <ng-container *ngFor=\"let portal of brand?.portals\">\n          <li *ngFor=\"let endpoint of portal?.endpoints\">\n            <a (click)=\"connectHandler($event, brand.id, portal.id, endpoint.id)\" class=\"cursor-pointer flex items-center p-3 text-base font-bold text-gray-900 rounded-lg bg-gray-50 hover:bg-gray-100 group hover:shadow dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-white\">\n              <span class=\"flex-1 ms-3 whitespace-nowrap\">{{portal.name}}</span>\n              <span class=\"inline-flex items-center justify-center px-2 py-0.5 ms-3 text-xs font-medium text-gray-500 bg-gray-200 rounded dark:bg-gray-700 dark:text-gray-400\">{{endpoint.platform_type}}</span>\n            </a>\n          </li>\n\n        </ng-container>\n      </ul>\n    </div>\n\n  </div>\n  <div class=\"flex justify-end space-x-4\">\n    <p class=\"font-light text-xs\">Powered by <a class=\"underline\" target=\"_blank\" href=\"https://www.fastenhealth.com\">Fasten Connect</a></p>\n  </div>\n</form>\n\n\n","export enum ApiMode {\n  Live = \"live\",\n  Test = \"test\",\n}\n\nexport enum ConnectMode {\n  Redirect = \"redirect\",\n  Popup = \"popup\",\n}\n\nexport const ConnectWindowTimeout = 24*5000 //wait 2 minutes (5 * 24 = 120)\n","import {Directive, ElementRef, HostListener, Input} from '@angular/core';\n\nconst DEFAULT_IMAGE_FALLBACK_PATH: string = 'https://cdn.fastenhealth.com/images/no-image.svg';\n\n@Directive({\n  selector: 'img[imageFallback]'\n})\nexport class ImageFallbackDirective {\n  @Input() imageFallback?: string;\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('error')\n  loadFallbackOnError() {\n    // Check to see if we have already tried to load the fallback image.\n    // Avoids endless loop if for some reason fallback image is missing. Just accept the broken image.\n    if (this.path(this.elementRef.nativeElement.src) == this.path(this.fallbackSrc())) {\n      return;\n    }\n\n    this.elementRef.nativeElement.src = this.fallbackSrc();\n  }\n\n  private fallbackSrc(): string {\n    return this.imageFallback || DEFAULT_IMAGE_FALLBACK_PATH;\n  }\n\n  private path(urlString: string): string {\n    // remove http(s) and domain\n    return urlString.replace(/^https?:\\/\\/[^\\/]*/, '');\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {initFlowbite} from 'flowbite';\nimport {LighthouseBrandListDisplayItem} from '../models/lighthouse/lighthouse-source-search';\nimport {ApiMode, ConnectMode} from '../constants';\nimport {Organization} from '../models/organization';\nimport {ConnectService} from '../services/connect.service';\n\nexport class SourceListItem {\n  brand: LighthouseBrandListDisplayItem\n  searchHighlights?: string[]\n}\n\n@Component({\n  // standalone: true,\n  selector: 'fasten-stitch',\n  templateUrl: './fasten-stitch.component.html',\n  styleUrls: ['./fasten-stitch.component.css']\n})\nexport class FastenStitchComponent implements OnInit {\n  @Input('public-id') publicId = ''; //validate\n  @Input('connect-mode') connectMode: ConnectMode = ConnectMode.Redirect;\n  @Input('reconnect-org-connection-id') reconnectOrgConnectionId: string | null = null;\n\n  public apiMode: ApiMode = ApiMode.Test\n  public org: Organization | undefined\n\n  selectedBrand: LighthouseBrandListDisplayItem = undefined\n\n  constructor(private connectApi: ConnectService) { }\n\n  ngOnInit(): void {\n    initFlowbite();\n\n    let publicIdParts = this.publicId.split('_')\n    if(publicIdParts.length == 3 && publicIdParts[1] == ApiMode.Live) {\n      this.apiMode = ApiMode.Live\n    }\n    console.log(this.publicId, publicIdParts, this.apiMode)\n\n    this.connectApi.getOrgByPublicId(this.publicId).subscribe((org: Organization) => {\n      this.org = org\n    })\n\n\n  }\n}\n","<!-- Modal toggle -->\n<button data-modal-target=\"defaultModal\" data-modal-toggle=\"defaultModal\" class=\"block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\" type=\"button\">\n  <div #ref><ng-content></ng-content></div>\n  <span *ngIf=\"!ref.hasChildNodes()\">\n    Share Records\n </span>\n</button>\n\n<!-- Main modal -->\n<div id=\"defaultModal\" tabindex=\"-1\" aria-hidden=\"true\" class=\"fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full\">\n  <div class=\"relative p-4 w-full max-w-2xl h-full md:h-auto\">\n    <!-- Modal content -->\n    <div class=\"relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5\">\n      <!-- Modal header -->\n\n      <div class=\"flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600\">\n        <h3 *ngIf=\"!selectedBrand; else brandName\" class=\"text-lg font-semibold text-gray-900 dark:text-white\">\n          Select a healthcare institution\n        </h3>\n\n        <ng-template #brandName>\n          <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            <button (click)=\"selectedBrand = null;\" type=\"button\" class=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\">\n              <svg class=\"w-5 h-5 rtl:rotate-180\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18\" />\n              </svg>\n              <span class=\"sr-only\">Back</span>\n            </button>\n            {{selectedBrand.name}}\n          </h3>\n\n        </ng-template>\n        <button type=\"button\" class=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\" data-modal-toggle=\"defaultModal\">\n          <svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path></svg>\n          <span class=\"sr-only\">Close modal</span>\n        </button>\n      </div>\n      <!-- Modal body -->\n\n      <app-brand-search *ngIf=\"!selectedBrand; else portalConnect\" [(brand)]=\"selectedBrand\" [apiMode]=\"apiMode\"></app-brand-search>\n      <ng-template #portalConnect>\n        <app-portal-connect\n          [org]=\"org\"\n          [publicId]=\"publicId\"\n          [brand]=\"selectedBrand\"\n          [apiMode]=\"apiMode\"\n          [connectMode]=\"connectMode\"\n          [reconnectOrgConnectionId]=\"reconnectOrgConnectionId\"\n        ></app-portal-connect>\n      </ng-template>\n    </div>\n  </div>\n</div>\n\n\n","export class SourceState {\n  state: string\n\n  endpoint_id: string\n  portal_id: string\n  brand_id: string\n\n  reconnect_source_id?: string //used to reconnect a source\n\n  code_verifier?: string\n  code_challenge_method?: string\n  code_challenge?: string\n  hidden: boolean\n  redirect_uri?: string\n}\n","\nexport class SearchFilter {\n  //primary search terms (changes here should restart the search completely)\n  query: string = \"\"\n\n  //secondary search terms/facets (changes here should restart pagination)\n  platformTypes: string[] = [];\n  categories: string[] = [];\n  showHidden: boolean = false;\n\n  //pagination - this is the current page (changes here should be ignored)\n  searchAfter: string | string[] = '';\n\n  fields: string[] = []; //specify the fields to return. if null or empty list, return all.\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {catchError, concatMap, filter, first, fromEvent, map, Observable, of, throwError, timeout} from 'rxjs';\nimport {ResponseWrapper} from '../models/response-wrapper';\nimport {environment} from '../../environments/environment';\nimport {Organization} from '../models/organization';\nimport {ConnectMode, ConnectWindowTimeout} from '../constants';\nimport {OrganizationConnectionCallback} from '../models/organization-connection-callback';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectService {\n\n  constructor(\n    private _httpClient: HttpClient,\n  ) { }\n\n  public getOrgByPublicId(publicId: String): Observable<Organization> {\n    let queryParams = {}\n    queryParams['public_id'] = publicId\n\n    return this._httpClient.get<ResponseWrapper>(\n      `${environment.connect_api_endpoint_base}/bridge/org`, {params: queryParams})\n      .pipe(\n        map((response: ResponseWrapper) => {\n          console.log(\"Organization\", response)\n          return response.data as Organization;\n        })\n      );\n  }\n\n  public connectWithRedirect(publicId: string, brandId: string, portalId: string, endpointId: string, reconnectOrgConnectionId?: string, connectMode?: ConnectMode): Observable<OrganizationConnectionCallback> {\n    const redirectUrlParts = new URL(`${environment.connect_api_endpoint_base}/bridge/connect`);\n    const redirectParams = new URLSearchParams()\n    redirectParams.set(\"public_id\", publicId)\n    redirectParams.set(\"brand_id\", brandId)\n    redirectParams.set(\"portal_id\", portalId)\n    redirectParams.set(\"endpoint_id\", endpointId)\n    if (reconnectOrgConnectionId) {\n      redirectParams.set(\"reconnect_org_connection_id\", reconnectOrgConnectionId)\n    }\n    if (connectMode) {\n      redirectParams.set(\"connect_mode\", connectMode)\n    }\n\n    redirectUrlParts.search = redirectParams.toString()\n    console.log(redirectUrlParts.toString());\n\n\n    //if we're in popup mode, we can open a new window, rather than redirecting the current window (which is an app frame)\n    if(connectMode == ConnectMode.Popup) {\n\n      //open a external url in a new window\n      let openedWindow = window.open(redirectUrlParts.toString(), \"_blank\");\n\n      return this.waitForOrgConnectionOrTimeout(openedWindow)\n    }\n    else {\n      //redirect to the url in the same window\n      window.location.href = redirectUrlParts.toString();\n      return of(null) //should never happen\n    }\n  }\n\n\n\n  private waitForOrgConnectionOrTimeout(openedWindow: Window): Observable<OrganizationConnectionCallback> {\n    console.log(`waiting for postMessage notification from popup window`)\n\n    //new code to listen to post message\n    return fromEvent(window, 'message')\n      .pipe(\n        //throw an error if we wait more than 2 minutes (this will close the window)\n        timeout(ConnectWindowTimeout),\n        //make sure we're only listening to events from the \"opened\" window.\n        filter((event: MessageEvent) => event.source == openedWindow),\n        //after filtering, we should only have one event to handle.\n        first(),\n        map((event) => {\n          console.log(`received postMessage notification from popup window & sending acknowledgment`)\n          // @ts-ignore\n          event.source.postMessage(JSON.stringify({close:true}), event.origin);\n          console.log(\"postmessage data\", event.data)\n          return JSON.parse(event.data) as OrganizationConnectionCallback\n        }),\n        catchError((err) => {\n          console.warn(`timed out waiting for notification from popup (${ConnectWindowTimeout/1000}s), closing window`)\n          openedWindow.self.close()\n          return throwError(err)\n        })\n      )\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {map, Observable, of} from 'rxjs';\nimport {LighthouseSourceSearch} from '../models/lighthouse/lighthouse-source-search';\nimport {ResponseWrapper} from '../models/response-wrapper';\nimport {SearchFilter} from '../models/search-filter';\nimport {ApiMode} from '../constants';\nimport {LighthouseSourceMetadata} from '../models/lighthouse/lighthouse-source-metadata';\nimport {SourceState} from '../models/lighthouse/source-state';\nimport * as Oauth from '@panva/oauth4webapi';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LighthouseService {\n\n  constructor(\n    private _httpClient: HttpClient,\n  ) { }\n\n\n  public searchLighthouseSources(apiMode: ApiMode, filter: SearchFilter): Observable<LighthouseSourceSearch> {\n    if((typeof filter.searchAfter === 'string' || filter.searchAfter instanceof String) && (filter.searchAfter as string).length > 0){\n      filter.searchAfter = (filter.searchAfter as string).split(',')\n    } else {\n      filter.searchAfter = []\n    }\n    const endpointUrl = new URL(`${this.getLighthouseEndpoint(apiMode)}/search`);\n    return this._httpClient.post<ResponseWrapper>(endpointUrl.toString(), filter)\n      .pipe(\n        map((response: ResponseWrapper) => {\n          console.log(\"Metadata RESPONSE\", response)\n          return response.data as LighthouseSourceSearch\n        })\n      );\n  }\n\n  async getLighthouseSource(apiMode: ApiMode, endpointId: string): Promise<LighthouseSourceMetadata> {\n    return this._httpClient.get<any>(`${this.getLighthouseEndpoint(apiMode)}/connect/${endpointId}`)\n      .pipe(\n        map((response: ResponseWrapper) => {\n          return response.data as LighthouseSourceMetadata\n        })\n      ).toPromise();\n  }\n\n  async generateSourceAuthorizeUrl(lighthouseSource: LighthouseSourceMetadata, reconnectSourceId?: string): Promise<URL> {\n    const state = this.uuidV4()\n    let sourceStateInfo = new SourceState()\n    sourceStateInfo.state = state\n    sourceStateInfo.endpoint_id = lighthouseSource.id\n    sourceStateInfo.portal_id = lighthouseSource.portal_id\n    sourceStateInfo.brand_id = lighthouseSource.brand_id\n    if(reconnectSourceId){\n      //if the source already exists, and we want to re-connect it (because of an expiration), we need to pass the existing source id\n      sourceStateInfo.reconnect_source_id = reconnectSourceId\n    }\n\n    // generate the authorization url\n    const authorizationUrl = new URL(lighthouseSource.authorization_endpoint);\n    authorizationUrl.searchParams.set('redirect_uri', lighthouseSource.redirect_uri);\n    authorizationUrl.searchParams.set('response_type', lighthouseSource.response_types_supported[0]);\n    authorizationUrl.searchParams.set('response_mode', lighthouseSource.response_modes_supported[0]);\n    authorizationUrl.searchParams.set('state', state);\n    authorizationUrl.searchParams.set('client_id', lighthouseSource.client_id);\n    if(lighthouseSource.scopes_supported && lighthouseSource.scopes_supported.length){\n      authorizationUrl.searchParams.set('scope', lighthouseSource.scopes_supported.join(' '));\n    } else {\n      authorizationUrl.searchParams.set('scope', '');\n    }\n    if (lighthouseSource.aud) {\n      authorizationUrl.searchParams.set('aud', lighthouseSource.aud);\n    }\n\n    //this is for providers that support CORS and PKCE (public client auth)\n    if(!lighthouseSource.confidential || (lighthouseSource.code_challenge_methods_supported || []).length > 0){\n      // https://github.com/panva/oauth4webapi/blob/8eba19eac408bdec5c1fe8abac2710c50bfadcc3/examples/public.ts\n      const codeVerifier = Oauth.generateRandomCodeVerifier();\n      const codeChallenge = await Oauth.calculatePKCECodeChallenge(codeVerifier);\n      const codeChallengeMethod = lighthouseSource.code_challenge_methods_supported?.[0] || 'S256'\n\n      sourceStateInfo.code_verifier = codeVerifier\n      sourceStateInfo.code_challenge = codeChallenge\n      sourceStateInfo.code_challenge_method = codeChallengeMethod\n\n      authorizationUrl.searchParams.set('code_challenge', codeChallenge);\n      authorizationUrl.searchParams.set('code_challenge_method', codeChallengeMethod);\n    }\n\n    //store the source state info\n    this.storeSourceState(state, sourceStateInfo)\n\n    return authorizationUrl\n  }\n\n  redirectWithOriginAndDestination(apiMode: ApiMode, destUrl: string, redirectOpts: {platform_type: string, redirect_uri: string, brand_id: string, portal_id: string, id: string}): Observable<{ codeData:any, state:string }> {\n    const originUrlParts = new URL(window.location.href)\n\n    //retrieve the state info from destUrl\n    const destUrlParts = new URL(destUrl)\n    const state = destUrlParts.searchParams.get(\"state\")\n\n    if(!state){\n      throw new Error(\"No state found in destination url\")\n      return null\n    }\n\n\n    //path based routing\n    originUrlParts.hash = \"\" //reset hash in-case its present.\n    originUrlParts.pathname = this.pathJoin([originUrlParts.pathname, `callback/${state}`])\n\n\n    let redirectUrl = this.pathJoin([this.getLighthouseEndpoint(apiMode), `redirect/${state}`])\n\n    const redirectUrlParts = new URL(redirectUrl);\n    const redirectParams = new URLSearchParams()\n    redirectParams.set(\"origin_url\", originUrlParts.toString())\n    redirectParams.set(\"dest_url\", destUrl)\n    redirectParams.set(\"desktop_mode\", \"false\")\n    redirectParams.set(\"brand_id\", redirectOpts.brand_id)\n    redirectParams.set(\"portal_id\", redirectOpts.portal_id)\n    redirectParams.set(\"endpoint_id\", redirectOpts.id)\n    redirectUrlParts.search = redirectParams.toString()\n    console.log(redirectUrlParts.toString());\n\n\n\n    //redirect to the url in the same window\n    window.location.href = redirectUrlParts.toString();\n    return of(null) //should never happen\n\n  }\n\n\n  //helpers\n\n  private getLighthouseEndpoint(apiMode: ApiMode): string {\n    return `${environment.lighthouse_api_endpoint_base}/${apiMode == ApiMode.Live ? 'v1' :'sandbox'}`\n  }\n\n  uuidV4(){\n    // @ts-ignore\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n  }\n\n  private pathJoin(parts: string[], sep?: string): string{\n    const separator = sep || '/';\n    parts = parts.map((part, index)=>{\n      if (index) {\n        part = part.replace(new RegExp('^' + separator), '');\n      }\n      if (index !== parts.length - 1) {\n        part = part.replace(new RegExp(separator + '$'), '');\n      }\n      return part;\n    })\n    return parts.join(separator);\n  }\n\n  public storeSourceState(state: string, sourceStateInfo: SourceState) {\n    localStorage.setItem(state, JSON.stringify(sourceStateInfo))\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  name: \"development\",\n\n  //specify the lighthouse base that we're going to use to authenticate against all our source/providers. Must not have trailing slash\n  lighthouse_api_endpoint_base: 'https://lighthouse.fastenhealth.com',\n\n  //used to specify the api server that we're going to use (can be relative or absolute). Must not have trailing slash\n  // connect_api_endpoint_base: 'https://api.connect-dev.fastenhealth.com/v1',\n  // if relative, must start with /\n  connect_api_endpoint_base: 'https://api.connect-dev.fastenhealth.com/v1',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.name == \"production\") {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["ApiMode","ConnectMode","i0","ɵɵelementStart","ɵɵlistener","PortalConnectComponent_ng_container_34_li_1_Template_a_click_1_listener","$event","restoredCtx","ɵɵrestoreView","_r5","endpoint_r3","$implicit","portal_r1","ɵɵnextContext","ctx_r4","ɵɵresetView","connectHandler","brand","id","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","name","platform_type","ɵɵelementContainerStart","ɵɵtemplate","PortalConnectComponent_ng_container_34_li_1_Template","ɵɵelementContainerEnd","ɵɵproperty","endpoints","PortalConnectComponent","constructor","lighthouseApi","connectApi","apiMode","Test","connectMode","Redirect","reconnectOrgConnectionId","ngOnInit","brandId","portalId","endpointId","currentTarget","disabled","connectWithRedirect","publicId","subscribe","orgConnectionCallbackData","console","log","ɵɵdirectiveInject","i1","LighthouseService","i2","ConnectService","selectors","inputs","org","decls","vars","consts","template","PortalConnectComponent_Template","rf","ctx","ɵɵelement","ɵɵnamespaceSVG","ɵɵnamespaceHTML","PortalConnectComponent_ng_container_34_Template","ɵɵpropertyInterpolate","logo_uri","ɵɵsanitizeUrl","ɵɵpropertyInterpolate1","ɵɵtextInterpolate1","portals","map","of","SourceState","Oauth","environment","_httpClient","searchLighthouseSources","filter","searchAfter","String","length","split","endpointUrl","URL","getLighthouseEndpoint","post","toString","pipe","response","data","getLighthouseSource","_this","_asyncToGenerator","get","toPromise","generateSourceAuthorizeUrl","lighthouseSource","reconnectSourceId","_this2","state","uuidV4","sourceStateInfo","endpoint_id","portal_id","brand_id","reconnect_source_id","authorizationUrl","authorization_endpoint","searchParams","set","redirect_uri","response_types_supported","response_modes_supported","client_id","scopes_supported","join","aud","confidential","code_challenge_methods_supported","codeVerifier","generateRandomCodeVerifier","codeChallenge","calculatePKCECodeChallenge","codeChallengeMethod","code_verifier","code_challenge","code_challenge_method","storeSourceState","redirectWithOriginAndDestination","destUrl","redirectOpts","originUrlParts","window","location","href","destUrlParts","Error","hash","pathname","pathJoin","redirectUrl","redirectUrlParts","redirectParams","URLSearchParams","search","lighthouse_api_endpoint_base","Live","replace","c","crypto","getRandomValues","Uint8Array","parts","sep","separator","part","index","RegExp","localStorage","setItem","JSON","stringify","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}